version: '2'
services:

  db:
    image: postgres:12.18-bullseye
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: health_events_db
    ports:
      - 5432:5432
    volumes: 
      - ./postgres_db:/var/lib/postgresql/data
    networks:
      - kafka_default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d -U root -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka_consumer:
    build: 
      context: .
      dockerfile: Dockerfile.kafka.consumer
    depends_on:
      - db
      - kafka
    networks:
      - kafka_default
    restart: on-failure

  kafka:
    image: docker.io/bitnami/kafka:3.7
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "bash", "-c", "cat < /dev/null > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - kafka_default
    restart: on-failure

  static_website:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./static_website:/usr/share/nginx/html
    networks:
      - kafka_default
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 30s
      timeout: 10s
      retries: 3

  generate_visualisations:
    build: 
      context: .
      dockerfile: Dockerfile.generate.website.visualisations
    volumes: 
      - .:/app
    depends_on:
      - db
      - kafka_consumer
      - ml_train_predict
    networks:
      - kafka_default
    restart: on-failure

  ml_train_predict:
    build: 
      context: .
      dockerfile: Dockerfile.ml.script
    volumes: 
      - .:/app
    depends_on:
      - db
      - kafka_consumer
    networks:
      - kafka_default
    restart: on-failure

volumes:
  kafka_data:
    driver: local
    
networks:
  kafka_default:
    name: kafka_default
    driver: bridge
